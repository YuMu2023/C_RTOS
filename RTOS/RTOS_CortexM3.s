	IMPORT RTOS_IS_FIRST_SCHEDULE_ADDR
	IMPORT RTOS_CURRENT_THREAD_SP_ADDR
	IMPORT RTOS_NEXT_THREAD_SP_ADDR
	IMPORT RTOS_CURRENT_THREAED_ADDR
	IMPORT RTOS_NEXT_THREAD_ADDR

RTOS_ICSR			EQU	0xE000ED04	;中断控制及状态寄存器地址
RTOS_SYSEPR3		EQU	0xE000ED20	;系统异常优先级寄存器阵列中，PendSV优先级所在字的地址
RTOS_PENDSV_PRI		EQU	0x00FF0000	;PendSV优先级（最低）
RTOS_PENDSV_SET		EQU	0x10000000	;触发PendSV中断的值
RTOS_SYSTICK_CTRL	EQU	0xE000E010	;SysTick控制寄存器地址


	AREA	|.text|, CODE, READONLY
	


;第一次调度
RTOS_FirstSchedule PROC
	
	EXPORT RTOS_FirstSchedule
		
	CPSID I
	CPSID F
	
	;设置中断优先级屏蔽为0，即不屏蔽任何中断
	MOV R0, #0
	MSR BASEPRI, R0
	
	;设置PendSV中断优先级为0xFF（即最低一级）
	LDR R0, =RTOS_SYSEPR3
	LDR R1, =RTOS_PENDSV_PRI
	LDR.W R2, [R0]
	ORR R1, R1, R2
	STR R1, [R0]
	
	;触发PendSV中断
	LDR R0, =RTOS_ICSR
	LDR R1, =RTOS_PENDSV_SET
	LDR.W R2, [R0]
	ORR R1, R1, R2
	STR R1, [R0]
	
	;使能SysTick
	LDR R0, =RTOS_SYSTICK_CTRL
	LDR R1, [R0]
	ORR R1, R1, #0x01
	STR R1, [R0]
	
	CPSIE I
	CPSIE F
	
	BX LR
	
	ENDP
	


RTOS_NormalSchedule PROC
	
	EXPORT RTOS_NormalSchedule
		
	;触发PendSV中断
	LDR R0, =RTOS_ICSR
	LDR R1, =RTOS_PENDSV_SET
	LDR.W R2, [R0]
	ORR R1, R1, R2
	STR R1, [R0]
	
	;打开系统中断
	MOV R0, #0
	MSR BASEPRI, R0
	
	BX LR
	
	ENDP







PendSV_Handler PROC
	
	EXPORT PendSV_Handler
		
	CPSID I
	
	;如果是第一次调度，直接跳转到RECOVER_NEXT_THREAD_SETTING，
	;即不需要保存现场，直接跳转到第一个线程执行。
	LDR R0, =RTOS_IS_FIRST_SCHEDULE_ADDR
	LDR R0, [R0]
	TST R0, #0x01
	BNE RECOVER_NEXT_THREAD_SETTING

	;中断产生会自动入栈部分寄存器，需要手动入栈其他寄存器
SAVE_CURRENT_THREAD_SETTING
	MRS R0, PSP
	STMDB R0!, {R4 - R11}
	LDR R1, =RTOS_CURRENT_THREAD_SP_ADDR
	LDR R1, [R1]
	STR R0, [R1]

	;恢复现场即把需要手动入栈的寄存器手动恢复，剩余的寄存器值中断结束后自动出栈
RECOVER_NEXT_THREAD_SETTING
	LDR R0, =RTOS_NEXT_THREAD_SP_ADDR
	LDR R0, [R0]
	LDR R0, [R0]
	LDMIA R0!, {R4 - R11}
	MSR PSP, R0
	
	;更换当前线程地址
	LDR R0, =RTOS_CURRENT_THREAED_ADDR
	LDR R1, =RTOS_NEXT_THREAD_ADDR
	LDR R1, [R1]
	STR R1, [R0]
	LDR R0, =RTOS_CURRENT_THREAD_SP_ADDR
	LDR R1, =RTOS_NEXT_THREAD_SP_ADDR
	LDR R1, [R1]
	STR R1, [R0]
	
	CPSIE I
	
	;LR位2置1表示中断结束后使用PSP
	ORR LR, LR, #0x04
	BX LR
	
	ENDP
	






RTOS_CloseAllInterrupt PROC
	
	EXPORT RTOS_CloseAllInterrupt
	
	CPSID I
	CPSID F
	
	BX LR
	
	ENDP


RTOS_OpenAllInterrupt PROC
	
	EXPORT RTOS_OpenAllInterrupt
		
	CPSIE I
	CPSIE F
	
	BX LR
	
	ENDP




RTOS_CloseSystemInterrupt PROC
	
	EXPORT RTOS_CloseSystemInterrupt
		
	MOV R0, #0xFF
	MSR BASEPRI, R0
	
	BX LR
	
	ENDP
		
		
RTOS_OpenSystemInterrupt PROC
	
	EXPORT RTOS_OpenSystemInterrupt
		
	MOV R0, #0
	MSR BASEPRI, R0
	
	BX LR
	
	ENDP



		
	ALIGN 4
	END

